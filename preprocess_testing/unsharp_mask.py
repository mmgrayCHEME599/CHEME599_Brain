# -*- coding: utf-8 -*-
"""Unsharp Mask

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10hBZydW61SnPzlAHlGY5KqfFRmV0aQ7x
"""

def unsharp_mask(im, scale): 
  ''' Perform unsharp masking on an image

  Generates a sharper image `im_us` from input image `im`
  by removing slowly varying background noise. Background
  noise is calculated using a width of 1/`scale` of the 
  image width. Rescales the resulting image to take adavantage
  of a wider range of pixel fluorescence available. 
    

  Parameters
  ----------
  im : a grayscale image
      color images should be converted using rgb2gray
  scale : int
      an integer describing the width of the box used
      to blur the image. The box will be 1/`scale` times
      the image width wide

  Returns
  -------
  im_us
      an ubyte image that representes `im` unsharp masked
      using an image with mask width  `scale`
    
  Notes
  -----
    Uses mean filter to create the background image 

  Examples
  --------
  #denoise grayscale cameraman image
  from skimage import data
  im=data.camera() # load cameraman image
  im_us=unsharp_mask(im,2) # perform unsharp masking...
  #with mean filter with scale box 1/2 im width
  plt.imshow(im_us) # show the resulting image 

  #denoise color image 
  from skimage import data, color
  im=sk.data.chelsea()
  im=sk.color.rgb2gray(im) # convert to grayscale
  im_us=unsharp_mask(im,40)
  plt.imshow(im_us)
  '''
  im=img_as_ubyte(im) # ensure the image is in uint8 form
  length=int((np.round(im.shape[1]/scale,0))); # set filter size to 1/ scaling factor of image size 
  selem=square(length) # create mask that is half as wide as the image rounded up
  background=1.0*rank.mean(im, selem) # generate the background image
  im_us=im-background # subtract background from main image
  # normalize the image fluoresence
  im_min=np.min(im_us)
  im_range = np.max(im_us)-im_min
  im_us = np.round(255*(im_us - im_min)/im_range, 0) # normalize
  return(im_us)